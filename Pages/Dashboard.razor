@page "/dashboard"
@using BlazorVersa.Data
@using ApexCharts
@inject FirebaseService FirebaseService
<link rel="stylesheet" href="Dashboard.css" />


<div class="container mt-4">
    <div class="row">
        <div class="col">
            <p class="text-center">
                <strong>Date Range:</strong> @GetFilterDateRange()
            </p>
        </div>
    </div>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <button @onclick="(() => CurrentGraph = GraphType.UploadSpeed)"
                                class="nav-link btn @((CurrentGraph == GraphType.UploadSpeed) ? "btn-tertiary" : "btn-outline-tertiary") mb-2">
                            Upload Speed
                        </button>
                    </li>
                    <li class="nav-item">
                        <button @onclick="(() => CurrentGraph = GraphType.DownloadSpeed)"
                                class="nav-link btn @((CurrentGraph == GraphType.DownloadSpeed) ? "btn-tertiary" : "btn-outline-tertiary") mb-2">
                            Download Speed
                        </button>
                    </li>
                    <li class="nav-item">
                        <button @onclick="(() => CurrentGraph = GraphType.PingSpeed)"
                                class="nav-link btn @((CurrentGraph == GraphType.PingSpeed) ? "btn-tertiary" : "btn-outline-tertiary") mb-2">
                            Ping Speed
                        </button>
                    </li>
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <select class="form-select" @onchange="ChangeInterval">
                            <option value="Daily">Daily</option>
                            <option value="Weekly">Weekly</option>
                            <option value="Monthly">Monthly</option>
                            <option value="Yearly">Yearly</option>
                        </select>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
</div>

@if (CurrentGraph == GraphType.UploadSpeed)
{
    @if (SelectedInterval == "Daily")
    {
     <div class="chart-container" id="upload-chart">

    <ApexChart TItem="SpeedtestResults"
               Title="@((CurrentGraph == GraphType.UploadSpeed ? "Upload" : CurrentGraph == GraphType.DownloadSpeed ? "Download" : "Ping") + " Speed (" + SelectedInterval + ")")">
        <ApexPointSeries TItem="SpeedtestResults"
                         Items="@(CurrentGraph == GraphType.UploadSpeed ? FilteredUploadSpeedData :
                                  CurrentGraph == GraphType.DownloadSpeed ? FilteredDownloadSpeedData :
                                  FilteredPingSpeedData)"
                         Name="@((CurrentGraph == GraphType.UploadSpeed ? "Upload" : CurrentGraph == GraphType.DownloadSpeed ? "Download" : "Ping") + " Speed")"
                         SeriesType="SeriesType.Line"
                         XValue="e => FormatTimestamp(e.timestamp)"
                             YValue="e => (decimal?)ParseSpeedValue(e.upload_speed)" />
        </ApexChart>
        </div>
    }
    else if (SelectedInterval == "Weekly")
    {
        <ApexChart TItem="SpeedtestResults"
                   Title="Upload Speed (Weekly)">
            <ApexPointSeries TItem="SpeedtestResults"
                             Items="FilteredUploadSpeedData"
                             Name="Upload Speed"
                             SeriesType="SeriesType.Line"
                             XValue="e => FormatTimestamp(e.timestamp)"
                             YValue="e => (decimal?)ParseSpeedValue(e.upload_speed)" />
        </ApexChart>
    }
    else if (SelectedInterval == "Monthly")
    {
        <ApexChart TItem="SpeedtestResults"
                   Title="Upload Speed (Monthly)">
            <ApexPointSeries TItem="SpeedtestResults"
                             Items="FilteredUploadSpeedData"
                             Name="Upload Speed"
                             SeriesType="SeriesType.Line"
                             XValue="e => FormatTimestamp(e.timestamp)"
                             YValue="e => (decimal?)ParseSpeedValue(e.upload_speed)" />
        </ApexChart>
    }
    else if (SelectedInterval == "Yearly")
    {
        <ApexChart TItem="SpeedtestResults"
                   Title="Upload Speed (Yearly)">
            <ApexPointSeries TItem="SpeedtestResults"
                             Items="FilteredUploadSpeedData"
                             Name="Upload Speed"
                             SeriesType="SeriesType.Line"
                             XValue="e => FormatTimestamp(e.timestamp)"
                             YValue="e => (decimal?)ParseSpeedValue(e.upload_speed)" />
        </ApexChart>
    }
}
else if (CurrentGraph == GraphType.DownloadSpeed)
{
    @if (SelectedInterval == "Daily")
    {
        <ApexChart TItem="SpeedtestResults"
                   Title="Download Speed (Daily)">
            <ApexPointSeries TItem="SpeedtestResults"
                             Items="FilteredDownloadSpeedData"
                             Name="Download Speed"
                             SeriesType="SeriesType.Line"
                             XValue="e => FormatTimestamp(e.timestamp)"
                             YValue="e => (decimal?)ParseSpeedValue(e.download_speed)" />
        </ApexChart>
    }
    else if (SelectedInterval == "Weekly")
    {
        <ApexChart TItem="SpeedtestResults"
                   Title="Download Speed (Weekly)">
            <ApexPointSeries TItem="SpeedtestResults"
                             Items="FilteredDownloadSpeedData"
                             Name="Download Speed"
                             SeriesType="SeriesType.Line"
                             XValue="e => FormatTimestamp(e.timestamp)"
                             YValue="e => (decimal?)ParseSpeedValue(e.download_speed)" />
        </ApexChart>
    }
    else if (SelectedInterval == "Monthly")
    {
        <ApexChart TItem="SpeedtestResults"
                   Title="Download Speed (Monthly)">
            <ApexPointSeries TItem="SpeedtestResults"
                             Items="FilteredDownloadSpeedData"
                             Name="Download Speed"
                             SeriesType="SeriesType.Line"
                             XValue="e => FormatTimestamp(e.timestamp)"
                             YValue="e => (decimal?)ParseSpeedValue(e.download_speed)" />
        </ApexChart>
    }
    else if (SelectedInterval == "Yearly")
    {
        <ApexChart TItem="SpeedtestResults"
                   Title="Download Speed (Yearly)">
            <ApexPointSeries TItem="SpeedtestResults"
                             Items="FilteredDownloadSpeedData"
                             Name="Download Speed"
                             SeriesType="SeriesType.Line"
                             XValue="e => FormatTimestamp(e.timestamp)"
                             YValue="e => (decimal?)ParseSpeedValue(e.download_speed)" />
        </ApexChart>
    }       }
else if (CurrentGraph == GraphType.PingSpeed)
{
    @if (SelectedInterval == "Daily")
    {
        <ApexChart TItem="SpeedtestResults"
                   Title="Ping Speed (Daily)">
            <ApexPointSeries TItem="SpeedtestResults"
                             Items="FilteredPingSpeedData"
                             Name="Ping Speed"
                             SeriesType="SeriesType.Line"
                             XValue="e => FormatTimestamp(e.timestamp)"
                             YValue="e => (decimal?)ParseSpeedValue(e.ping_speed)" />
        </ApexChart>
    }
    else if (SelectedInterval == "Weekly")
    {
        <ApexChart TItem="SpeedtestResults"
                   Title="Ping Speed (Weekly)">
            <ApexPointSeries TItem="SpeedtestResults"
                             Items="FilteredPingSpeedData"
                             Name="Ping Speed"
                             SeriesType="SeriesType.Line"
                             XValue="e => FormatTimestamp(e.timestamp)"
                             YValue="e => (decimal?)ParseSpeedValue(e.ping_speed)" />
        </ApexChart>
    }
    else if (SelectedInterval == "Monthly")
    {
        <ApexChart TItem="SpeedtestResults"
                   Title="Ping Speed (Monthly)">
            <ApexPointSeries TItem="SpeedtestResults"
                             Items="FilteredPingSpeedData"
                             Name="Ping Speed"
                             SeriesType="SeriesType.Line"
                             XValue="e => FormatTimestamp(e.timestamp)"
                             YValue="e => (decimal?)ParseSpeedValue(e.ping_speed)" />
        </ApexChart>
    }
    else if (SelectedInterval == "Yearly")
    {
        <ApexChart TItem="SpeedtestResults"
                   Title="Ping Speed (Yearly)">
            <ApexPointSeries TItem="SpeedtestResults"
                             Items="FilteredPingSpeedData"
                             Name="Ping Speed"
                             SeriesType="SeriesType.Line"
                             XValue="e => FormatTimestamp(e.timestamp)"
                             YValue="e => (decimal?)ParseSpeedValue(e.ping_speed)" />
        </ApexChart>
    }       }

@code {
    private List<SpeedtestResults> SpeedtestData { get; set; } = new();
    private List<SpeedtestResults> FilteredUploadSpeedData { get; set; } = new();
    private List<SpeedtestResults> FilteredDownloadSpeedData { get; set; } = new();
    private List<SpeedtestResults> FilteredPingSpeedData { get; set; } = new();
    private GraphType CurrentGraph { get; set; } = GraphType.UploadSpeed;
    private string SelectedInterval { get; set; } = "Daily";

    protected override async Task OnInitializedAsync()
    {
        var (resultsDictionary, _, _) = await FirebaseService.GetSpeedtestResultsAndRawDataAsync();

        if (resultsDictionary != null)
        {
            SpeedtestData = resultsDictionary.Values.ToList();
            CurrentGraph = GraphType.UploadSpeed; // Set default graph type to Upload Speed
            SelectedInterval = "Daily"; // Set default interval to Daily
            FilterData(); // Filter and process the data
            ChangeInterval(new ChangeEventArgs { Value = SelectedInterval }); // Trigger graph update
        }
        else
        {
            // Handle error or no data scenario
        }
    }

    private List<DateTime> CalculateTimestamps(List<DateTime> timestamps, int maxPoints)
    {
        List<DateTime> result = new List<DateTime>();
        int dataPointCount = timestamps.Count;

        if (dataPointCount <= maxPoints)
        {
            // If there are fewer data points than the maximum allowed, use all timestamps
            result.AddRange(timestamps);
        }
        else
        {
            // Calculate the step size to skip timestamps
            double stepSize = (double)dataPointCount / maxPoints;

            // Add timestamps based on the step size
            for (int i = 0; i < maxPoints; i++)
            {
                int index = (int)Math.Round(i * stepSize);
                result.Add(timestamps[index]);
            }
        }

        return result;
    }

    private void FilterData()
    {
        // Filter data based on selected interval
        if (SelectedInterval == "Weekly")
        {
            // Filter and average weekly data
            var today = DateTime.UtcNow.Date;
            var lastWeek = today.AddDays(-7);
            FilteredUploadSpeedData = AverageData(FilterDataBySpeedType("upload_speed").Where(d => d.timestamp.Date >= lastWeek && d.timestamp.Date <= today).ToList());
            FilteredDownloadSpeedData = AverageData(FilterDataBySpeedType("download_speed").Where(d => d.timestamp.Date >= lastWeek && d.timestamp.Date <= today).ToList());
            FilteredPingSpeedData = AverageData(FilterDataBySpeedType("ping_speed").Where(d => d.timestamp.Date >= lastWeek && d.timestamp.Date <= today).ToList());
        }
        else if (SelectedInterval == "Monthly")
        {
            // Filter and average monthly data
            var today = DateTime.UtcNow.Date;
            var lastMonth = today.AddMonths(-1);
            FilteredUploadSpeedData = AverageData(FilterDataBySpeedType("upload_speed").Where(d => d.timestamp.Date >= lastMonth && d.timestamp.Date <= today).ToList());
            FilteredDownloadSpeedData = AverageData(FilterDataBySpeedType("download_speed").Where(d => d.timestamp.Date >= lastMonth && d.timestamp.Date <= today).ToList());
            FilteredPingSpeedData = AverageData(FilterDataBySpeedType("ping_speed").Where(d => d.timestamp.Date >= lastMonth && d.timestamp.Date <= today).ToList());
        }
        else if (SelectedInterval == "Yearly")
        {
            // Filter and average yearly data
            var today = DateTime.UtcNow.Date;
            var lastYear = today.AddYears(-1);
            FilteredUploadSpeedData = AverageData(FilterDataBySpeedType("upload_speed").Where(d => d.timestamp.Date >= lastYear && d.timestamp.Date <= today).ToList());
            FilteredDownloadSpeedData = AverageData(FilterDataBySpeedType("download_speed").Where(d => d.timestamp.Date >= lastYear && d.timestamp.Date <= today).ToList());
            FilteredPingSpeedData = AverageData(FilterDataBySpeedType("ping_speed").Where(d => d.timestamp.Date >= lastYear && d.timestamp.Date <= today).ToList());
        }
        else
        {
            // Filter daily data (default)
            var today = DateTime.UtcNow.Date;
            FilteredUploadSpeedData = FilterDataBySpeedType("upload_speed").Where(d => d.timestamp.Date == today).ToList();
            FilteredDownloadSpeedData = FilterDataBySpeedType("download_speed").Where(d => d.timestamp.Date == today).ToList();
            FilteredPingSpeedData = FilterDataBySpeedType("ping_speed").Where(d => d.timestamp.Date == today).ToList();
        }

        // Calculate timestamps based on the number of data points you want to display
        int maxPoints = 10; // Change this value as needed
        List<DateTime> uploadTimestamps = GetTimestampsForHourBlocks(FilteredUploadSpeedData, maxPoints);
        List<DateTime> downloadTimestamps = GetTimestampsForHourBlocks(FilteredDownloadSpeedData, maxPoints);
        List<DateTime> pingTimestamps = GetTimestampsForHourBlocks(FilteredPingSpeedData, maxPoints);

        // Round the filtered data to two decimal places
        FilteredUploadSpeedData.ForEach(d => d.upload_speed = RoundToTwoDecimalPlaces(decimal.TryParse(d.upload_speed, out var value) ? value : 0m).ToString());
        FilteredDownloadSpeedData.ForEach(d => d.download_speed = RoundToTwoDecimalPlaces(decimal.TryParse(d.download_speed, out var value) ? value : 0m).ToString());
        FilteredPingSpeedData.ForEach(d => d.ping_speed = RoundToTwoDecimalPlaces(decimal.TryParse(d.ping_speed, out var value) ? value : 0m).ToString());
    }

    private List<DateTime> GetTimestampsForHourBlocks(List<SpeedtestResults> data, int maxPoints)
    {
        List<DateTime> timestamps = data.Select(d => d.timestamp).Distinct().OrderBy(t => t).ToList();
        return CalculateTimestamps(timestamps, maxPoints);
    }



    private List<SpeedtestResults> AverageData(List<SpeedtestResults> data)
    {
        var averagedData = new List<SpeedtestResults>();

        for (int i = 0; i < data.Count; i += 4) 
        {
            var subset = data.Skip(i).Take(4);
            var average = new SpeedtestResults
                {
                    timestamp = subset.First().timestamp, // Assuming timestamp is the same for each subset
                    upload_speed = subset.Average(d => decimal.TryParse(d.upload_speed, out var value) ? value : 0m).ToString(),
                    download_speed = subset.Average(d => decimal.TryParse(d.download_speed, out var value) ? value : 0m).ToString(),
                    ping_speed = subset.Average(d => decimal.TryParse(d.ping_speed, out var value) ? value : 0m).ToString()
                };

            averagedData.Add(average);
        }

        return averagedData;
    }

    private List<SpeedtestResults> FilterDataBySpeedType(string speedType)
    {
        // Filter out data points with empty or invalid speed values
        return SpeedtestData.Where(d => !string.IsNullOrEmpty(d.timestamp.ToString()) &&
                                         !string.IsNullOrEmpty(GetSpeedValue(d, speedType))).ToList();
    }

    private string GetSpeedValue(SpeedtestResults result, string speedType)
    {
        switch (speedType)
        {
            case "upload_speed":
                return result.upload_speed;
            case "download_speed":
                return result.download_speed;
            case "ping_speed":
                return result.ping_speed;
            default:
                return null;
        }
    }

    private decimal ParseSpeedValue(string speed)
    {
        if (!string.IsNullOrEmpty(speed))
        {
            decimal parsedSpeed;
            if (decimal.TryParse(speed, out parsedSpeed))
            {
                return parsedSpeed;
            }
        }
        // Default value if parsing fails or speed is empty
        return 0m; // Change this to another suitable default value
    }

    
    private string FormatTimestamp(DateTime timestamp)
    {
        return timestamp.ToString("HH:mm");
    }

    private void ChangeInterval(ChangeEventArgs e)
    {
        SelectedInterval = e.Value.ToString();
        FilterData();
        StateHasChanged(); // Re-render the component after the selection change
    }

    private decimal RoundToTwoDecimalPlaces(decimal value)
    {
        return Math.Round(value, 2);
    }

    private string GetFilterDateRange()
    {
        DateTime startDate;
        DateTime endDate;

        switch (SelectedInterval)
        {
            case "Weekly":
                startDate = DateTime.UtcNow.Date.AddDays(-7);
                endDate = DateTime.UtcNow.Date;
                break;
            case "Monthly":
                startDate = DateTime.UtcNow.Date.AddMonths(-1);
                endDate = DateTime.UtcNow.Date;
                break;
            case "Yearly":
                startDate = DateTime.UtcNow.Date.AddYears(-1);
                endDate = DateTime.UtcNow.Date;
                break;
            default: // Daily
                startDate = DateTime.UtcNow.Date;
                endDate = DateTime.UtcNow.Date;
                break;
        }

        return $"{startDate.Day}{GetOrdinalSuffix(startDate.Day)} {startDate:MMMM yyyy} - {endDate.Day}{GetOrdinalSuffix(endDate.Day)} {endDate:MMMM yyyy}";
    }

    private string GetOrdinalSuffix(int day)
    {
        if (day >= 11 && day <= 13)
        {
            return "th";
        }

        switch (day % 10)
        {
            case 1:
                return "st";
            case 2:
                return "nd";
            case 3:
                return "rd";
            default:
                return "th";
        }
    }

    private enum GraphType
    {
        UploadSpeed,
        DownloadSpeed,
        PingSpeed
    }
}