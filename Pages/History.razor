@page "/history"
@using BlazorVersa.Data
@using MudBlazor
@inject FirebaseService FirebaseService

<style>
    .page-container {
        padding: 20px;
        max-width: 100%;
    }

    .mud-table-striped tbody tr:nth-child(odd) {
        background-color: blue;
    }

    .mud-table-hover tbody tr:hover {
        background-color: #e2e6ea;
    }

    .mud-table-bordered th,
    .mud-table-bordered td {
        border: 1px solid #dee2e6;
    }

    .flex-container {
        display: flex;
        align-items: center;
    }

    .search-field {
        margin-left: auto;
    }

</style>

<MudContainer Class="page-container">
    <div class="flex-container">
        <MudText Typo="Typo.h6">Speed Test Results</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="search-field mt-0"></MudTextField>
    </div>
    <MudTable Items="@SpeedtestResultsList" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<SpeedtestResults,bool>(FilterFunc)">
        <HeaderContent>
            <MudTh>Timestamp</MudTh>
            <MudTh>Upload Speed</MudTh>
            <MudTh>Download Speed</MudTh>
            <MudTh>Ping Speed</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Timestamp">@context.timestamp</MudTd>
                <MudTd DataLabel="Upload Speed">@context.upload_speed</MudTd>
                <MudTd DataLabel="Download Speed">@context.download_speed</MudTd>
                <MudTd DataLabel="Ping Speed">@context.ping_speed</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudContainer>

    @code {
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString = "";

    private List<SpeedtestResults> SpeedtestResultsList = new List<SpeedtestResults>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var (resultsDictionary, _, errorMessage) = await FirebaseService.GetSpeedtestResultsAndRawDataAsync();
        if (resultsDictionary != null)
        {
            SpeedtestResultsList = resultsDictionary.Values.ToList();
        }
        else
        {
            // Handle error
            Console.WriteLine($"Failed to fetch speedtest results: {errorMessage}");
        }
    }

    private bool FilterFunc(SpeedtestResults result)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (result.timestamp.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (result.upload_speed.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (result.download_speed.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (result.ping_speed.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
