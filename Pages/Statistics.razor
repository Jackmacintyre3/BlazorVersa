@page "/statistics"
@using BlazorVersa.Data
@using System.Text.Json
@using MudBlazor

<style>
    .page-container {
        padding: 20px;
        max-width: 100%;
    }

    .mud-table-striped tbody tr:nth-child(odd) {
        background-color: blue;
    }

    .mud-table-hover tbody tr:hover {
        background-color: #e2e6ea;
    }

    .mud-table-bordered th,
    .mud-table-bordered td {
        border: 1px solid #dee2e6;
    }

    .flex-container {
        display: flex;
        align-items: center;
    }

    .search-field {
        margin-left: auto;
    }
</style>

<MudContainer Class="page-container">
    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        //<MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
    }        <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>

    else
    {
        @* <div class="flex-container">
            <MudText Typo="Typo.h6">Devices in the Network</MudText>
        </div>
        <MudTable Items="devices" Dense="true" Hover="true" Bordered="true" Striped="true">
            <HeaderContent>
                <MudTh>IP Address</MudTh>
                <MudTh>MAC Address</MudTh>
                <MudTh>Vendor</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="IP Address">@context.Ip</MudTd>
                    <MudTd DataLabel="MAC Address">@context.Mac</MudTd>
                    <MudTd DataLabel="Vendor">@context.Vendor</MudTd>
                </RowTemplate>
            </MudTable> *@
        <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>

    }
</MudContainer>

@code {
    private List<ScanResults> devices = new List<ScanResults>();
    private bool isLoading = true;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadDevicesAsync();
    }

    private async Task LoadDevicesAsync()
    {
        try
        {
            isLoading = true;
            string filePath = @"C:\Users\Jack\OneDrive - Atlantic TU\Desktop\BlazorVersa\Resources\results.json";
            if (System.IO.File.Exists(filePath))
            {
                var jsonString = await System.IO.File.ReadAllTextAsync(filePath);
                var rootObject = JsonSerializer.Deserialize<RootObject>(jsonString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (rootObject?.Devices != null && rootObject.Devices.Any())
                {
                    devices = rootObject.Devices;
                }
                else
                {
                    throw new InvalidOperationException("No valid results available.");
                }
            }
            else
            {
                throw new FileNotFoundException("The data source file was not found.");
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }
}
