@page "/scan"
@using BlazorVersa.Data
@using System.Text.Json
@using MudBlazor

<style>
    .page-container {
        padding: 20px;
        max-width: 100%;
    }

    .mud-table-striped tbody tr:nth-child(odd) {
        background-color: blue;
    }

    .mud-table-hover tbody tr:hover {
        background-color: #e2e6ea;
    }

    .mud-table-bordered th,
    .mud-table-bordered td {
        border: 1px solid #dee2e6;
    }

    .flex-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .search-field {
        margin-left: auto;
    }

    .header-info {
        padding: 10px;
        background-color: #f4f4f4;
        border-radius: 4px;
        margin-bottom: 20px;
        font-size: 1.1em;
        text-align: center;
        justify-content: center;
    }
</style>

<MudContainer Class="page-container">
    <div class="header-info">
        <strong>ARP Scan Results</strong><br>
        Interface: eth0, MAC: b8:27:eb:d0:52:69, IPv4: 192.168.1.192
    </div>
    <MudTable Items="devices" Dense="true" Hover="true" Bordered="true" Striped="true">
        <HeaderContent>
            <MudTh>IP Address</MudTh>
            <MudTh>MAC Address</MudTh>
            <MudTh>Vendor</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="IP Address">@context.Ip</MudTd>
                <MudTd DataLabel="MAC Address">@context.Mac</MudTd>
                <MudTd DataLabel="Vendor">@context.Vendor</MudTd>
            </RowTemplate>
        </MudTable>
    </MudContainer>

    @code {
    private List<ScanResults> devices = new List<ScanResults>();

    protected override async Task OnInitializedAsync()
    {
        await LoadDevicesAsync();
    }

    private async Task LoadDevicesAsync()
    {
        string filePath = @"C:\Users\Jack\OneDrive - Atlantic TU\Desktop\BlazorVersa\Resources\results.json";
        if (System.IO.File.Exists(filePath))
        {
            var jsonString = await System.IO.File.ReadAllTextAsync(filePath);
            var rootObject = JsonSerializer.Deserialize<RootObject>(jsonString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            if (rootObject?.Devices != null)
            {
                devices = rootObject.Devices;
            }
        }
    }
}
