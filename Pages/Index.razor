@page "/"
@using BlazorVersa.Data
@inject FirebaseService FirebaseService
@inject IEmailService EmailService
@inject ConnectivityService ConnectivityService
@implements IDisposable

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <h1 class="text-center mb-3 display-4">Welcome to VersaNet</h1>
            <p class="lead text-center mb-5">Explore real-time monitoring and analysis of your internet speeds.</p>

            @if (isConnected)
            {
                <div style="color: #000000; padding: 10px; text-align: center;">
                    <span>Internet Connection: </span>
                    <span style="height: 15px; width: 15px; background-color: #4CAF50; border-radius: 50%; display: inline-block;"></span>
                    <span> Online</span>
                </div>
            }
            else
            {
                <div style="color: #000000; padding: 10px; text-align: center;">
                    <span>Internet Connection: </span>
                    <span style="height: 15px; width: 15px; background-color: #f44336; border-radius: 50%; display: inline-block;"></span>
                    <span> Offline</span>
                </div>
            }

            @if (IsValidResults(latestResults))
            {
                <div class="mb-5">
                    <div class="bg-white border rounded shadow-sm p-4 text-center">
                        <h2 class="mb-4">Latest Results</h2>
                        <p class="font-weight-bold ">Upload Speed: <span class="text-dark">@latestResults.upload_speed Mbps</span></p>
                        <p class="font-weight-bold ">Download Speed: <span class="text-dark">@latestResults.download_speed Mbps</span></p>
                        <p class="font-weight-bold ">Ping: <span class="text-dark">@latestResults.ping_speed ms</span></p>
                    </div>
                </div>
            }
            else
            {
                <div class="text-center">
                    <p>No valid results available.</p>
                </div>
            }

            <div class="text-center mb-5">
                <a href="/dashboard" class="btn btn-primary btn-lg px-5 mr-3">Explore Dashboard</a>
                <a href="/history" class="btn btn-outline-secondary btn-lg px-5">History</a>
            </div>
        </div>
    </div>
</div>

<style>
    .bg-white {
        background-color: #fff !important;
    }

    .font-weight-bold {
        font-weight: bold !important;
    }
</style>

@code {
    private bool isConnected;
    private SpeedtestResults latestResults;

    protected override async Task OnInitializedAsync()
    {
        isConnected = ConnectivityService.IsConnected;
        await LoadLatestResults();
        ConnectivityService.ConnectivityChanged += UpdateConnectivityStatus;
    }

    private async Task LoadLatestResults()
    {
        var (resultsDictionary, _, errorMessage) = await FirebaseService.GetSpeedtestResultsAndRawDataAsync();
        if (errorMessage == null && resultsDictionary != null)
        {
            latestResults = resultsDictionary.Values.OrderByDescending(r => r.timestamp).FirstOrDefault(r => IsValidResults(r));
        }
    }

    private bool IsValidResults(SpeedtestResults results)
    {
        return results != null &&
               double.TryParse(results.upload_speed, out double upload) && upload > 0 &&
               double.TryParse(results.download_speed, out double download) && download > 0 &&
               double.TryParse(results.ping_speed, out double ping) && ping > 0;
    }

    private void UpdateConnectivityStatus(bool status)
    {
        isConnected = status;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ConnectivityService.ConnectivityChanged -= UpdateConnectivityStatus;
    }
}
